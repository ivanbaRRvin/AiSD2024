//L507_185
//обход графа в ширину
//мх-201 Бенко Андрей Александрович

void process_vertex_early(int v) {
    std::cout << "Обработка вершины " << v << " на этапе раннего обхода\n";
}

void process_vertex_late(int v) {
    std::cout << "Обработка вершины " << v << " на этапе позднего обхода\n";
}

void process_edge(int v, int y) {
    std::cout << "Обработка ребра (" << v << ", " << y << ")\n";
}

// Объявляем массивы для отслеживания состояния вершин
bool processed[MAXV + 1];    // Отмечает, обработана ли вершина
bool discovered[MAXV + 1];   // Отмечает, обнаружена ли вершина
int parent[MAXV + 1];        // Родительская вершина для каждой вершины

// Инициализация поиска
void initialize_search(graph *g) {
    for (int i = 1; i <= g->nvertices; i++) {
        processed[i] = discovered[i] = false;
        parent[i] = -1;
    }
}

// Обход графа в ширину (BFS)
void bfs(graph *g, int start) {
    initialize_search(g);       // Инициализация поиска перед началом обхода в ширину

    std::queue<int> q;          // Очередь для вершин, которые нужно обработать
    int v;                      // Текущая вершина
    int y;                      // Смежная (следующая) вершина
    edgenode *p;                // Временный указатель для обхода рёбер

    q.push(start);              // Добавляем стартовую вершину в очередь
    discovered[start] = true;   // Помечаем стартовую вершину как обнаруженную

    while (!q.empty()) {        // Пока очередь не пуста
        v = q.front();          // Извлекаем вершину из начала очереди
        q.pop();                // Удаляем вершину из очереди

        process_vertex_early(v); // Обрабатываем вершину на этапе "раннего" обхода
        processed[v] = true;     // Помечаем вершину как обработанную

        p = g->edges[v];         // Получаем список смежных вершин для текущей вершины
        while (p != nullptr) {   // Проходим по всем смежным вершинам
            y = p->y;            // Получаем идентификатор смежной вершины
            
            // Обрабатываем ребро, если смежная вершина еще не была обработана
            if (!processed[y] || g->directed) {
                process_edge(v, y);  // Обработка ребра
            }
            
            // Если смежная вершина еще не была обнаружена
            if (!discovered[y]) {
                q.push(y);          // Добавляем её в очередь
                discovered[y] = true; // Помечаем как обнаруженную
                parent[y] = v;       // Устанавливаем текущую вершину как родителя
            }
            
            p = p->next;  // Переходим к следующему ребру
        }
        
        process_vertex_late(v); // Обрабатываем вершину на этапе "позднего" обхода
    }
}
